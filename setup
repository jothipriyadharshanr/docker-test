#!/bin/bash

##
## Make sure only root can run our script
##
check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Please sudo or log in as root first." 1>&2
    exit 1
  fi
}

##
## Do we have docker?
##
check_and_install_docker () {
  docker_path=`which docker.io || which docker`
  if [ -z $docker_path ]; then
    read  -p "Docker not installed. Enter to install from https://get.docker.com/ or Ctrl+C to exit"
    curl https://get.docker.com/ | sh
  fi
  docker_path=`which docker.io || which docker`
  if [ -z $docker_path ]; then
    echo Docker install failed. Quitting.
    exit
  fi
}

##
## What are we running on
##
check_OS() {
  echo `uname -s`
}

##
## Linux available memory
##
check_linux_memory() {
  echo `free -g --si | awk ' /Mem:/  {print $2} '`
}

##
## Do we have enough memory and disk space for GeoSpark?
##
check_disk_and_memory() {
  os_type=$(check_OS)
  avail_mem=0
  if [ "$os_type" == "Darwin" ]; then
    echo "GeoSpark requires Linux bases OS to run. This system does not appear to have Linux based OS." 1>&2
    exit 1
  else
    avail_mem=$(check_linux_memory)
  fi

  if [ "$avail_mem" -lt 1 ]; then
    echo "WARNING: GeoSpark requires 1GB RAM to run. This system does not appear"
    echo "to have sufficient memory."
    echo
    echo "Your backend may not work properly, or future upgrades of GeoSpark may not"
    echo "complete successfully."
    exit 1
  fi

  if [ "$avail_mem" -le 2 ]; then
    total_swap=`free -g --si | awk ' /Swap:/  {print $2} '`

    if [ "$total_swap" -lt 2 ]; then
      echo "WARNING: Discourse requires at least 2GB of swap when running with 2GB of RAM"
      echo "or less. This system does not appear to have sufficient swap space."
      echo
      echo "Without sufficient swap space, your site may not work properly, and future"
      echo "upgrades of Discourse may not complete successfully."
      echo
      echo "Ctrl+C to exit or wait 5 seconds to have a 2GB swapfile created."
      sleep 5

      ##
      ## derived from https://meta.discourse.org/t/13880
      ##
      install -o root -g root -m 0600 /dev/null /swapfile
      fallocate -l 2G /swapfile
      mkswap /swapfile
      swapon /swapfile
      echo "/swapfile       swap    swap    auto      0       0" | tee -a /etc/fstab
      sysctl -w vm.swappiness=10
      echo 'vm.swappiness = 10' > /etc/sysctl.d/30-discourse-swap.conf

      total_swap=`free -g --si | awk ' /Swap:/ {print $2} '`
      if [ "$total_swap" -lt 3 ]; then
        echo "Failed to create swap: are you root? Are you running on real hardware, or a fully virtualized server?"
        exit 1
      fi

    fi
  fi


  free_disk="$(df /var | tail -n 1 | awk '{print $4}')"
  if [ "$free_disk" -lt 10000 ]; then
    echo "WARNING: GeoSpark requires at least 10GB free disk space. This system"
    echo "does not appear to have sufficient disk space."
    echo
    echo "Insufficient disk space may result in problems running your site, and"
    echo "may not even allow Discourse installation to complete successfully."
    echo
    echo "Please free up some space, or expand your disk, before continuing."
    echo
    echo "Run \`apt-get autoremove && apt-get autoclean\` to clean up unused"
    echo "packages and \`./launcher cleanup\` to remove stale Docker containers."
    exit 1
  fi

}

##
## standard http / https ports must not be occupied
##
check_ports() {
    check_port "80"
    check_port "443"
    echo "Ports 80 and 443 are free for use"
}


##
## check a port to see if it is already in use
##
check_port() {

  local valid=$(netstat -tln | awk '{print $4}' | grep ":${1}\$")

  if [ -n "$valid" ]; then
    echo "Port ${1} appears to already be in use."
    echo
    echo "This will show you what command is using port ${1}"
    lsof -i tcp:${1} -s tcp:listen
    echo
    echo "If you are trying to run GeoSpark simultaneously with another web"
    echo "server like Apache or nginx, you will need to bind to a different port"
    echo
    echo "If you are reconfiguring an already-configured GeoSpark, use "
    echo
    echo "./launcher stop app"
    echo
    echo "to stop GeoSpark before you reconfigure it and try again."
    exit 1
  fi
}

##
## If we have lots of RAM or lots of CPUs, bump up the defaults to scale better
##
scale_ram_and_cpu() {

  local changelog=/tmp/changelog.$PPID
  # grab info about total system ram and physical (NOT LOGICAL!) CPU cores
  avail_gb=0
  avail_cores=0
  os_type=$(check_OS)
  if [ "$os_type" == "Darwin" ]; then
    echo "GeoSpark requires Linux bases OS to run. This system does not appear to have Linux based OS." 1>&2
    exit 1
  else
    avail_gb=$(check_linux_memory)
    avail_cores=$((`awk '/cpu cores/ {print $4;exit}' /proc/cpuinfo`*`sort /proc/cpuinfo | uniq | grep -c "physical id"`))
  fi
  echo "Found ${avail_gb}GB of memory and $avail_cores physical CPU cores"

  # db_shared_buffers: 128MB for 1GB, 256MB for 2GB, or 256MB * GB, max 4096MB
  if [ "$avail_gb" -eq "1" ]
  then
    db_shared_buffers=128
  else
    if [ "$avail_gb" -eq "2" ]
    then
      db_shared_buffers=256
    else
      db_shared_buffers=$(( 256 * $avail_gb ))
    fi
  fi
  db_shared_buffers=$(( db_shared_buffers < 4096 ? db_shared_buffers : 4096 ))

  sed -i -e "s/^  #\?db_shared_buffers:.*/  db_shared_buffers: \"${db_shared_buffers}MB\"/w $changelog" $data_file
  if [ -s $changelog ]
  then
    echo "setting db_shared_buffers = ${db_shared_buffers}MB"
    rm $changelog
  fi

  # USGI_WORKERS: 2 * GB for 2GB or less, or 2 * CPU, max 8
  if [ "$avail_gb" -le "2" ]
  then
    uwsgi_workers = $(( 2 * $avail_gb ))
  else
    uwsgi_workers = $(( 2 * $avail_cores ))
  fi
  uwsgi_workers=$(( uwsgi_workers < 8 ? uwsgi_workers : 8 ))

  sed -i -e "s/^  #\?USGI_WORKERS:.*/  USGI_WORKERS: ${uwsgi_workers}/w $changelog" $web_file
  if [ -s $changelog ]
  then
      echo "setting USGI_WORKERS = ${uwsgi_workers}"
      rm $changelog
  fi

  echo $data_file memory parameters updated.
}

##
## template file names
##

if [ "$1" == "2container" ]
then
    app_name=web_only
    data_name=data
    web_file=containers/$app_name.yml
else
  app_name=app
  data_name=app
  web_file=containers/$app_name.yml
fi
    changelog=/tmp/changelog

##
## Check requirements before creating a copy of a config file we won't edit
##
check_root
check_and_install_docker
check_disk_and_memory

if [ -a "$web_file" ]
then
  echo "The configuration file $web_file already exists!"
  echo
  echo ". . . reconfiguring . . ."
  echo
  echo
  DATE=`date +"%Y-%m-%d-%H%M%S"`
  BACKUP=$app_name.yml.$DATE.bak
  echo Saving old file as $BACKUP
  cp $web_file containers/$BACKUP
  echo "Stopping existing container in 5 seconds or Control-C to cancel."
  sleep 5
  ./launcher stop app
  echo
else
  check_ports
  cp -v $web_file
  if [ "$data_name" == "data" ]
  then
      echo "--------------------------------------------------"
      echo "This two container setup is currently unsupported. Use at your own risk!"
      echo "--------------------------------------------------"
      DISCOURSE_DB_PASSWORD=`date +%s | sha256sum | base64 | head -c 20`

     sed -i -e "s/DISCOURSE_DB_PASSWORD: SOME_SECRET/DISCOURSE_DB_PASSWORD: $DISCOURSE_DB_PASSWORD/w $changelog" $web_file
     if  [ -s $changelog ]
     then
   rm $changelog
     else
       echo "Problem changing DISCOURSE_DB_PASSWORD" in $web_file
     fi

     cp -v $data_template $data_file
     quote=\'
     sed -i -e "s/password ${quote}SOME_SECRET${quote}/password '$DISCOURSE_DB_PASSWORD'/w $changelog" $data_file
     if  [ -s $changelog ]
     then
   rm $changelog
     else
       echo "Problem changing DISCOURSE_DB_PASSWORD" in $data_file
     fi
  fi
fi

scale_ram_and_cpu